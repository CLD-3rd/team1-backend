#####
name: ci
on:
  push:
    branches:
      - ci/cloudformation-github-actions

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # - name: Make application.properties
    #   run: |
    #     mkdir -p ./src/main/resources
    #     cd ./src/main/resources
    #     touch ./application.properties
    #     echo "${{ secrets.PROPERTIES }}" > ./application.properties
    #   shell: bash


    - name: Create application.properties
      run: |
        mkdir -p src/main/resources
        echo "spring.data.redis.host=${{ secrets.REDIS_ENDPOINT }}" >> src/main/resources/application.properties
        echo "spring.data.redis.port=6379" >> src/main/resources/application.properties
        echo "spring.datasource.url=jdbc:mysql://${{ secrets.RDS_ENDPOINT }}:3306/mydb" >> src/main/resources/application.properties
        echo "spring.datasource.username=admin" >> src/main/resources/application.properties
        echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> src/main/resources/application.properties
        echo "cloud.aws.region.static=ap-northeast-2" >> src/main/resources/application.properties
        echo "cloud.aws.s3.bucket=${{ secrets.S3_BUCKET }}" >> src/main/resources/application.properties
        echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> src/main/resources/application.properties
        echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> src/main/resources/application.properties


    - name: Build with Maven
      run: mvn -B -DskipTests package --file pom.xml

    - name: Naming jar file
      run: mv ./target/*.jar ./target/app.jar

    - name: Check jar file
      run: ls ./target

    - uses: actions/upload-artifact@v4
      with:
        name: app
        path: ./target/*.jar

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:  
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ secrets.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set SHORT_SHA env
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    # - name: Build and push to ECR (ECR PRIVATE)
    #   uses: docker/build-push-action@v6
    #   with:
    #     context: .
    #     push: true
    #     tags: ${{ steps.login-ecr.outputs.registry }}/vinyl-groove:${{ env.SHORT_SHA }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ env.SHORT_SHA }}


  cd:
    runs-on: ubuntu-latest

    needs: ci

    steps:
    - uses: actions/checkout@v4
      with:
        repository: CLD-3rd/team1-manifest
        ref: main
        token: ${{ secrets.GH_TOKEN }}
        path: team1-manifest

    - name: Set SHORT_SHA env
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ secrets.AWS_REGION }}
    
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2

    # - name: Update image tag with kustomize edit
    #   run: |
    #     cd team1-manifest/manifest/overlays/dev
    #     kustomize edit set image ${{ steps.login-ecr.outputs.registry }}/vinyl-groove:${{ env.SHORT_SHA }}

    - name: Update image tag with kustomize edit
      run: |
        cd team1-manifest/manifest/overlays/dev
        kustomize edit set image h6bro/vinyl-app-repo=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ env.SHORT_SHA }}

    - name: Commit and push changes
      run: |
        cd team1-manifest
        git config --local user.email "gjwnsgud4016@gmail.com"
        git config --local user.name "HeoJunHyoung"
        git add .
        git commit -m "Update image tag to ${{ env.SHORT_SHA }}"
        git push
